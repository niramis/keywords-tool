{"ast":null,"code":"export function add(a, b) {\n  return a + b;\n} // get random int\n\nexport function get_random(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n} //get random double\n\nexport function get_random_double(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\nexport function get_random_array(size, min_x, max_x, min_y, max_y) {\n  let result = [];\n\n  for (let i = 0; i < size; i++) {\n    result.push([get_random(min_x, max_x), get_random(min_y, max_y)]);\n  }\n\n  return result;\n}\nexport function get_random_area_array(size, min_x, max_x, min_y, max_y, s_dev) {\n  let result = [];\n\n  for (let i = 0; i < size; i++) {\n    let y = get_random(min_y, max_y);\n    result.push([i, y - s_dev, y + s_dev, y]);\n  }\n\n  return result;\n}\nexport function scale_data(data, ranges, width, height) {\n  let result = [];\n  let x_diff = ranges.max_x - ranges.min_x;\n  let y_diff = ranges.max_y - ranges.min_y;\n  let x_frame = width / x_diff;\n  let y_frame = height / y_diff;\n\n  for (let i = 0; i < data.length; i++) {\n    result.push([data[i][0] * x_frame, height - data[i][1] * y_frame]);\n  }\n\n  return result;\n}\nexport function scale_area_data(area_data, ranges, width, height) {\n  let result = [];\n  let x_diff = ranges.max_x - ranges.min_x;\n  let y_diff = ranges.max_y - ranges.min_y;\n  let x_frame = width / x_diff;\n  let y_frame = height / y_diff;\n\n  for (let i = 0; i < area_data.length; i++) {\n    result.push([area_data[i][0] * x_frame, height - area_data[i][1] * y_frame, height - area_data[i][2] * y_frame, height - area_data[i][3] * y_frame]);\n  }\n\n  return result;\n} /////////////\n// MOCKED DATA\n\nexport function get_random_mock_array(size, min_x, max_x, min_y, max_y) {\n  let result = [];\n\n  for (let i = min_x; i <= max_x; i++) {\n    result.push([i, get_random(min_y, max_y)]);\n  }\n\n  return result;\n} // /// RANDOM COLOR\n// export function random_rgba() {\n//     var o = Math.round, r = Math.random, s = 123;\n//     return 'rgb(' + o(r()*s) + ',' + o(r()*s) + ',' + o(r()*s) + ',' + r().toFixed(1) + ')';\n// }\n\nexport function get_random_colors(number) {\n  let colors = [\"#a2cd9f\", \"#6ef4ef\", \"#ea6e2e\", \"#6e224c\", \"#edfc35\", \"\", \"\"];\n  return colors.slice(0, number);\n}\nexport function get_box_height(number) {\n  if (number === 0) {\n    return 0;\n  }\n\n  return 25 * (number + 1) + 10;\n} ///////////////////////////////\n// MOCKED DATA with DATES\n\nexport function get_random_mock_array_dates(dates, min_y, max_y) {\n  let result = [];\n\n  for (let i = 0; i < dates.length; i++) {\n    result.push([i, dates[i], get_random(min_y, max_y)]);\n  }\n\n  return result;\n} // export function get_random_mock_array_area_dates(dates, min_y, max_y){\n//     let result = [];\n//     let std\n//     for (let i=0; i<dates.length; i++){\n//         result.push([i, dates[i] ,get_random(min_y, max_y)])\n//     }\n//     return result;\n// }\n\nexport function scale_data_dates(data, ranges, width, height) {\n  let result = [];\n  let x_diff = ranges.max_x - ranges.min_x;\n  let y_diff = ranges.max_y - ranges.min_y;\n  let x_frame = width / x_diff;\n  let y_frame = height / y_diff;\n\n  for (let i = 0; i < data.length; i++) {\n    result.push([data[i][0] * x_frame, data[i][1], height - data[i][2] * y_frame]);\n  }\n\n  return result;\n}\nexport function scale_data_area_dates(data, ranges, width, height, prefix = 0) {\n  let result = [];\n  let x_diff = Math.abs(ranges.max_x - ranges.min_x);\n  let y_diff = Math.abs(ranges.max_y - ranges.min_y);\n  let x_frame = width / (x_diff - 1);\n  let y_frame = height / y_diff;\n\n  for (let i = 0; i < data.length; i++) {\n    result.push([(i + prefix) * x_frame, data[i][1], height - data[i][2] * y_frame + y_frame * ranges.min_y, height - data[i][3] * y_frame + y_frame * ranges.min_y, height - data[i][4] * y_frame + y_frame * ranges.min_y]);\n  }\n\n  return result;\n}\nexport function get_random_mock_area_array_dates(dates, min_y, max_y) {\n  let result = [];\n\n  for (let i = 0; i < dates.length; i++) {\n    let s_d1 = get_random(2, 8);\n    let s_d2 = get_random(2, 8);\n    let random = get_random(min_y, max_y);\n    result.push([i, dates[i], random, random - s_d1, random + s_d2]);\n  }\n\n  return result;\n}\nexport function get_data_mocks_area_DATES(data_mocks_area_DATES1, data_mocks_area_DATES2, number) {\n  let result = [];\n\n  for (let i = 0; i < number; i++) {\n    result.push(data_mocks_area_DATES1[i].concat(data_mocks_area_DATES2[i]));\n  }\n\n  return result;\n}\nexport function scale_data_mocks(data, ranges, width, height) {\n  let scaled_data_mocks_area_DATES = [];\n  let scaled_data_mocks_area_future_DATES = [];\n  let number_of_plots = data.historical_data.length;\n\n  for (let i = 0; i < number_of_plots; i++) {\n    scaled_data_mocks_area_DATES.push(scale_data_area_dates(data.historical_data[i], ranges, width, height));\n    scaled_data_mocks_area_future_DATES.push(scale_data_area_dates(data.forecasted_data[i], ranges, width, height, data.historical_data[i].length - 1));\n  }\n\n  return [scaled_data_mocks_area_DATES, scaled_data_mocks_area_future_DATES];\n}\nexport function get_data_map_area_DATES(data) {\n  let data_mocks_area_DATES = [];\n  let number_of_series = data.historical_data.length;\n\n  for (let i = 0; i < number_of_series; i++) {\n    data_mocks_area_DATES.push(data.historical_data[i].concat(data.forecasted_data[i]));\n  }\n\n  let data_map_area_DATES = [];\n  let counter = 0;\n  let data_length = data_mocks_area_DATES[0].length;\n\n  for (let i = 0; i < data_length; i++) {\n    // for(let i = 0; i<array_length_dates -2; i++) {\n    let y_data_normal = [];\n    let y_data_min = [];\n    let y_data_max = [];\n    let date;\n    date = data_mocks_area_DATES[0][i][1];\n\n    for (let j = 0; j < number_of_series; j++) {\n      y_data_normal.push(data_mocks_area_DATES[j][i][2]);\n      y_data_min.push(data_mocks_area_DATES[j][i][3]);\n      y_data_max.push(data_mocks_area_DATES[j][i][4]);\n    }\n\n    data_map_area_DATES[i] = [i, date, y_data_normal, y_data_min, y_data_max];\n  }\n\n  return data_map_area_DATES;\n}\nexport function capitalizeString(string) {\n  return titleCase(string);\n}\n\nfunction titleCase(str) {\n  var splitStr = str.toLowerCase().split(' ');\n\n  for (var i = 0; i < splitStr.length; i++) {\n    splitStr[i] = splitStr[i].charAt(0).toUpperCase() + splitStr[i].substring(1);\n  }\n\n  return splitStr.join(' ');\n} // export function get_historical_dates(){\n//     let dates = []\n//     dates.push(Date.UTC(2010, 0, 18))\n//     dates.push(Date.UTC(2010, 1, 18))\n//     dates.push( Date.UTC(2010, 2, 18))\n//     dates.push(Date.UTC(2010, 3, 18))\n//     dates.push( Date.UTC(2010, 4, 18))\n//     dates.push( Date.UTC(2010, 5, 18))\n//     dates.push( Date.UTC(2010, 6, 18))\n//     dates.push( Date.UTC(2010, 7, 18))\n//     // dates.push(Date.UTC(2010, 8, 18))\n//     // dates.push( Date.UTC(2010, 9, 18))\n//     // dates.push( Date.UTC(2010, 10, 18))\n//     return dates;\n// }\n// export function get_forecasted_dates(){\n//     let dates = []\n//     // dates.push( Date.UTC(2010, 7, 18))\n//     dates.push(Date.UTC(2010, 8, 18))\n//     dates.push( Date.UTC(2010, 9, 18))\n//     return dates;\n// }\n\n\nexport function get_min_value(data) {\n  let min_result = 100;\n\n  for (let i = 0; i < data.length; i++) {\n    for (let j = 0; j < data[i].length - 2; j++) {\n      if (data[i][j][3] !== null && data[i][j][3] < min_result) {\n        min_result = data[i][j][3];\n      }\n    }\n  }\n\n  return min_result;\n}\nexport function get_max_value(data) {\n  let max_result = 0;\n\n  for (let i = 0; i < data.length; i++) {\n    for (let j = 0; j < data[i].length - 2; j++) {\n      if (data[i][j][4] !== null && data[i][j][4] > max_result) {\n        max_result = data[i][j][4];\n      }\n    }\n  }\n\n  return max_result;\n}","map":{"version":3,"sources":["G:/kloud9/dashboard-last/trends-tool/client/src/components/plot/src/plot/utils/functions.js"],"names":["add","a","b","get_random","min","max","Math","ceil","floor","random","get_random_double","get_random_array","size","min_x","max_x","min_y","max_y","result","i","push","get_random_area_array","s_dev","y","scale_data","data","ranges","width","height","x_diff","y_diff","x_frame","y_frame","length","scale_area_data","area_data","get_random_mock_array","get_random_colors","number","colors","slice","get_box_height","get_random_mock_array_dates","dates","scale_data_dates","scale_data_area_dates","prefix","abs","get_random_mock_area_array_dates","s_d1","s_d2","get_data_mocks_area_DATES","data_mocks_area_DATES1","data_mocks_area_DATES2","concat","scale_data_mocks","scaled_data_mocks_area_DATES","scaled_data_mocks_area_future_DATES","number_of_plots","historical_data","forecasted_data","get_data_map_area_DATES","data_mocks_area_DATES","number_of_series","data_map_area_DATES","counter","data_length","y_data_normal","y_data_min","y_data_max","date","j","capitalizeString","string","titleCase","str","splitStr","toLowerCase","split","charAt","toUpperCase","substring","join","get_min_value","min_result","get_max_value","max_result"],"mappings":"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","sourcesContent":["\r\n\r\nexport function add(a, b){\r\n    return a + b;\r\n}\r\n\r\n// get random int\r\nexport function get_random(min, max){\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\n//get random double\r\nexport function get_random_double(min, max){\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\nexport function get_random_array(size, min_x, max_x, min_y, max_y){\r\n    let result = [];\r\n\r\n    for (let i=0;i< size; i++){\r\n        result.push([get_random(min_x, max_x), get_random(min_y, max_y)])\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function get_random_area_array(size, min_x, max_x, min_y, max_y, s_dev){\r\n    let result = [];\r\n\r\n    for (let i=0;i< size; i++){\r\n        let y = get_random(min_y, max_y);\r\n        result.push([i, y - s_dev, y + s_dev, y])\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function scale_data(data, ranges ,width, height){\r\n    let result = [];\r\n\r\n    let x_diff = ranges.max_x - ranges.min_x;\r\n    let y_diff = ranges.max_y - ranges.min_y;\r\n\r\n    let x_frame = width/x_diff;\r\n    let y_frame = height/y_diff;\r\n\r\n    for (let i=0; i<data.length; i++){\r\n        result.push([data[i][0] * x_frame, height - data[i][1] * y_frame ])\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function scale_area_data(area_data, ranges, width, height){\r\n    let result = [];\r\n\r\n    let x_diff = ranges.max_x - ranges.min_x;\r\n    let y_diff = ranges.max_y - ranges.min_y;\r\n\r\n    let x_frame = width/x_diff;\r\n    let y_frame = height/y_diff;\r\n\r\n    for (let i=0; i<area_data.length; i++){\r\n        result.push([area_data[i][0] * x_frame, height - area_data[i][1] * y_frame, height - area_data[i][2] * y_frame, height - area_data[i][3] * y_frame])\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\n\r\n/////////////\r\n// MOCKED DATA\r\n\r\nexport function get_random_mock_array(size, min_x, max_x, min_y, max_y){\r\n    let result = [];\r\n\r\n    for (let i=min_x; i<=max_x; i++){\r\n        result.push([i, get_random(min_y, max_y)])\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\n\r\n// /// RANDOM COLOR\r\n// export function random_rgba() {\r\n//     var o = Math.round, r = Math.random, s = 123;\r\n//     return 'rgb(' + o(r()*s) + ',' + o(r()*s) + ',' + o(r()*s) + ',' + r().toFixed(1) + ')';\r\n// }\r\n\r\n\r\nexport function get_random_colors(number) {\r\n    let colors = [\"#a2cd9f\", \"#6ef4ef\", \"#ea6e2e\", \"#6e224c\", \"#edfc35\", \"\", \"\"];\r\n\r\n    return colors.slice(0, number);\r\n}\r\n\r\nexport function get_box_height(number){\r\n    if (number === 0){\r\n        return 0;\r\n    }\r\n    return 25*(number + 1) + 10;\r\n}\r\n\r\n\r\n///////////////////////////////\r\n// MOCKED DATA with DATES\r\n\r\n\r\nexport function get_random_mock_array_dates(dates, min_y, max_y){\r\n    let result = [];\r\n\r\n    for (let i=0; i<dates.length; i++){\r\n        result.push([i, dates[i] ,get_random(min_y, max_y)])\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\n// export function get_random_mock_array_area_dates(dates, min_y, max_y){\r\n//     let result = [];\r\n//     let std\r\n\r\n//     for (let i=0; i<dates.length; i++){\r\n//         result.push([i, dates[i] ,get_random(min_y, max_y)])\r\n//     }\r\n\r\n//     return result;\r\n// }\r\n\r\nexport function scale_data_dates(data, ranges ,width, height){\r\n    let result = [];\r\n\r\n    let x_diff = ranges.max_x - ranges.min_x;\r\n    let y_diff = ranges.max_y - ranges.min_y;\r\n\r\n    let x_frame = width/x_diff;\r\n    let y_frame = height/y_diff;\r\n\r\n    for (let i=0; i<data.length; i++){\r\n        result.push([data[i][0] * x_frame, data[i][1], height - data[i][2] * y_frame ])\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function scale_data_area_dates(data, ranges ,width, height, prefix=0){\r\n    let result = [];\r\n    let x_diff = Math.abs(ranges.max_x - ranges.min_x);\r\n    let y_diff = Math.abs(ranges.max_y - ranges.min_y);\r\n    \r\n    let x_frame = width/(x_diff - 1);\r\n    let y_frame = height/y_diff;\r\n\r\n    for (let i=0; i<data.length; i++){\r\n        result.push([(i+prefix) * x_frame, data[i][1], height - data[i][2] * y_frame + y_frame*(ranges.min_y), height - data[i][3] * y_frame + y_frame*(ranges.min_y), height - data[i][4] * y_frame + y_frame*(ranges.min_y)])\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function get_random_mock_area_array_dates(dates, min_y, max_y){\r\n    let result = [];\r\n    \r\n\r\n\r\n\r\n    for (let i=0; i<dates.length; i++){\r\n        let s_d1 = get_random(2,8);\r\n        let s_d2 = get_random(2,8);\r\n        let random = get_random(min_y, max_y);\r\n        result.push([i, dates[i], random, random - s_d1, random + s_d2])\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function get_data_mocks_area_DATES(data_mocks_area_DATES1, data_mocks_area_DATES2, number){\r\n    let result = []\r\n\r\n    for(let i=0;i<number;i++){\r\n        result.push(data_mocks_area_DATES1[i].concat(data_mocks_area_DATES2[i]))\r\n    }\r\n\r\n    return result\r\n}\r\n\r\nexport function scale_data_mocks(data, ranges, width, height){\r\n    let scaled_data_mocks_area_DATES = []\r\n    let scaled_data_mocks_area_future_DATES = []\r\n\r\n    let number_of_plots = data.historical_data.length\r\n\r\n    for (let i=0; i<number_of_plots; i++){\r\n        scaled_data_mocks_area_DATES.push(scale_data_area_dates(data.historical_data[i], ranges, width, height));\r\n        scaled_data_mocks_area_future_DATES.push(scale_data_area_dates(data.forecasted_data[i], ranges, width,  height, data.historical_data[i].length - 1));\r\n    }\r\n\r\n    return [scaled_data_mocks_area_DATES, scaled_data_mocks_area_future_DATES]\r\n}\r\nexport function get_data_map_area_DATES(data) {\r\n    \r\n    let data_mocks_area_DATES = [];\r\n    let number_of_series = data.historical_data.length;\r\n    \r\n    for(let i=0;i<number_of_series;i++){\r\n        data_mocks_area_DATES.push(data.historical_data[i].concat(data.forecasted_data[i]))\r\n    }\r\n\r\n    let data_map_area_DATES = [];\r\n    \r\n    let counter = 0;\r\n    let data_length = data_mocks_area_DATES[0].length;\r\n\r\n    for(let i = 0; i<data_length; i++) {\r\n    // for(let i = 0; i<array_length_dates -2; i++) {\r\n        let y_data_normal = [];\r\n        let y_data_min = [];\r\n        let y_data_max = [];\r\n        let date;\r\n      \r\n        date = data_mocks_area_DATES[0][i][1]\r\n      \r\n        for(let j=0; j<number_of_series; j++) {\r\n          y_data_normal.push(data_mocks_area_DATES[j][i][2])\r\n          y_data_min.push(data_mocks_area_DATES[j][i][3])\r\n          y_data_max.push(data_mocks_area_DATES[j][i][4])\r\n        }\r\n      \r\n        data_map_area_DATES[i] = [i, date, y_data_normal, y_data_min, y_data_max]\r\n    }\r\n\r\n    return data_map_area_DATES;\r\n}\r\n\r\nexport function capitalizeString(string) {\r\n    return titleCase(string);\r\n}\r\n\r\nfunction titleCase(str) {\r\n    var splitStr = str.toLowerCase().split(' ');\r\n    for (var i = 0; i < splitStr.length; i++) {\r\n        splitStr[i] = splitStr[i].charAt(0).toUpperCase() + splitStr[i].substring(1);     \r\n    }\r\n    return splitStr.join(' '); \r\n }\r\n\r\n// export function get_historical_dates(){\r\n//     let dates = []\r\n//     dates.push(Date.UTC(2010, 0, 18))\r\n//     dates.push(Date.UTC(2010, 1, 18))\r\n//     dates.push( Date.UTC(2010, 2, 18))\r\n//     dates.push(Date.UTC(2010, 3, 18))\r\n//     dates.push( Date.UTC(2010, 4, 18))\r\n//     dates.push( Date.UTC(2010, 5, 18))\r\n//     dates.push( Date.UTC(2010, 6, 18))\r\n//     dates.push( Date.UTC(2010, 7, 18))\r\n//     // dates.push(Date.UTC(2010, 8, 18))\r\n//     // dates.push( Date.UTC(2010, 9, 18))\r\n//     // dates.push( Date.UTC(2010, 10, 18))\r\n    \r\n//     return dates;\r\n// }\r\n\r\n// export function get_forecasted_dates(){\r\n//     let dates = []\r\n//     // dates.push( Date.UTC(2010, 7, 18))\r\n//     dates.push(Date.UTC(2010, 8, 18))\r\n//     dates.push( Date.UTC(2010, 9, 18))\r\n\r\n//     return dates;\r\n\r\n// }\r\n\r\nexport function get_min_value(data){\r\n    let min_result = 100;\r\n\r\n    for(let i=0; i<data.length; i++){\r\n        for(let j=0;j<data[i].length-2; j++){\r\n            if(data[i][j][3]!==null && data[i][j][3] < min_result){\r\n                min_result = data[i][j][3]\r\n            }\r\n        }\r\n    }\r\n    return min_result\r\n}\r\n\r\nexport function get_max_value(data){\r\n    let max_result = 0;\r\n\r\n    for(let i=0; i<data.length; i++){\r\n        for(let j=0;j<data[i].length-2; j++){\r\n            if(data[i][j][4]!==null && data[i][j][4] > max_result){\r\n                max_result = data[i][j][4]\r\n            }\r\n        }\r\n    }\r\n    \r\n    return max_result\r\n}"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"G:\\\\kloud9\\\\dashboard-last\\\\keywords-tool\\\\client\\\\src\\\\components\\\\plot\\\\src\\\\plot\\\\KeywordPlot.js\";\nimport React from 'react';\nimport './App.css';\nimport { get_random_colors, get_box_height, get_data_mocks_area_DATES, scale_data_mocks, get_data_map_area_DATES, get_min_value, get_max_value } from './utils/functions';\nimport { appConfig } from './utils/config.js';\nimport AxisX from './parts/AxisX';\nimport AxisY from './parts/AxisY';\nimport Legend from './parts/Legend';\nimport Static_Line from './parts/Static_Line';\nimport Pointer_Line from './parts/Pointer_Line';\nimport Info_Box from './parts/Info_Box';\nimport Area_Path from './parts/Area_Path';\nimport Plot from './parts/Plot';\nimport './css/plot.css';\nlet dimensions = appConfig.dimensions;\nconst ratio = 4.5;\nexport class KeywordPlot extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.handleMouseMove = this.handleMouseMove.bind(this);\n    this.handleHoverOff = this.handleHoverOff.bind(this);\n    this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\n    let x_trans_left = 85;\n    let y_trans_up = 85;\n    let y_trans_bottom = 85;\n    let width = window.innerWidth * 0.6 - 2 * x_trans_left;\n    let height = this.props.plot_settings.height - y_trans_up - y_trans_bottom;\n    this.divRef = React.createRef();\n    let min_y = get_min_value(this.props.data.historical_data);\n    let max_y = get_max_value(this.props.data.historical_data);\n    let number_of_series = this.props.plot_settings.keywords.length;\n    let lower_bound = (Math.ceil((min_y + 1) / 10) - 1) * 10;\n    let upper_bound = Math.ceil((Math.abs(max_y) + 1) / 10) * 10;\n    let ranges = {\n      max_x: this.props.data.historical_data[0].length + this.props.data.forecasted_data[0].length,\n      min_x: 0,\n      max_y: upper_bound,\n      min_y: lower_bound\n    };\n    this.state = {\n      title: this.props.plot_settings.title,\n      x_label: this.props.plot_settings.x_label,\n      y_label: this.props.plot_settings.y_label,\n      mark_line: {\n        pos: 0,\n        visibility: \"hidden\"\n      },\n      info_box: {\n        pos_x: 0,\n        pos_y: 0,\n        visibility: \"hidden\",\n        colors: get_random_colors(number_of_series)\n      },\n      scaled_data: this.scale_data_mocks(this.props.data, ranges, width, height),\n      data_map_area_DATES: this.get_data_map_area_DATES(this.props.data),\n      colors: this.get_random_colors(number_of_series),\n      info_box_height: this.get_box_height(number_of_series),\n      dimensions: {\n        svg_width: width,\n        width: width / 1.1,\n        height: height,\n        x_trans: x_trans_left,\n        y_trans: y_trans_up,\n        y_trans_bottom: y_trans_bottom,\n        historical_data_length: this.props.data.historical_data[0].length,\n        forecasted_data_length: this.props.data.forecasted_data[0].length\n      },\n      min_y: min_y,\n      max_y: max_y,\n      ticks: 12,\n      ranges: ranges,\n      number_of_series: number_of_series // height: height\n\n    };\n  }\n\n  componentDidMount() {\n    this.updateWindowDimensions();\n    window.addEventListener('resize', this.updateWindowDimensions);\n    this.divRef.current.focus();\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.updateWindowDimensions);\n  }\n\n  updateWindowDimensions() {\n    let svg_width = this.divRef.current.clientWidth;\n    let sizes = this.get_dimensions(svg_width);\n    let x_trans_left = sizes.x_trans_left;\n    let x_trans_right = sizes.x_trans_right;\n    let y_trans_up = sizes.y_trans_up;\n    let y_trans_bottom = sizes.y_trans_bottom;\n    let height = sizes.height;\n    let plot_width = svg_width - x_trans_left - x_trans_right;\n    let plot_height = this.props.plot_settings.height - y_trans_up - y_trans_bottom; // let plot_height = this.state.height - y_trans_up - y_trans_bottom;\n\n    let ranges = this.state.ranges;\n    this.setState({\n      dimensions: {\n        svg_width: svg_width,\n        width: plot_width,\n        height: plot_height,\n        x_trans: x_trans_left,\n        y_trans: y_trans_up,\n        x_trans_right: x_trans_right,\n        y_trans_bottom: y_trans_bottom,\n        historical_data_length: this.props.data.historical_data[0].length,\n        forecasted_data_length: this.props.data.forecasted_data[0].length\n      },\n      scaled_data: this.scale_data_mocks(this.props.data, ranges, plot_width, plot_height)\n    });\n  }\n\n  scale_data_mocks(data, ranges, width, height) {\n    return scale_data_mocks(data, ranges, width, height);\n  }\n\n  get_data_map_area_DATES(data) {\n    return get_data_map_area_DATES(data);\n  }\n\n  get_random_colors(number_of_series) {\n    return get_random_colors(number_of_series);\n  }\n\n  get_box_height(number_of_series) {\n    return get_box_height(number_of_series);\n  }\n\n  handleMouseMove(event) {\n    var e = event.target;\n    var dim = e.getBoundingClientRect();\n    var x = event.clientX - dim.left - this.state.dimensions.x_trans;\n    var y = event.clientY - dim.top - this.state.dimensions.y_trans;\n\n    if (x >= 0 && y >= 0 && x <= this.state.dimensions.width && y <= this.state.dimensions.height) {\n      let x_diff = this.state.ranges.max_x - this.state.ranges.min_x;\n      let x_frame = this.state.dimensions.width / x_diff;\n      let key = Math.round(x / x_frame);\n\n      if (this.state.data_map_area_DATES[key] !== undefined) {\n        let left_index = Math.round((this.state.ranges.max_x - this.state.ranges.min_x) / 2) - 1;\n        let right_index = Math.round((this.state.ranges.max_x - this.state.ranges.min_x) / 2) + 1; //keys left\n\n        for (let i = this.state.ranges.min_x; i <= key; i++) {\n          if (this.state.data_map_area_DATES[i] !== undefined) {\n            left_index = i;\n          }\n        } //keys right\n\n\n        for (let i = key; i <= this.state.ranges.max_x; i++) {\n          if (this.state.data_map_area_DATES[i] !== undefined) {\n            right_index = i;\n          }\n        } //index difference\n\n\n        this.setState({\n          mark_line: {\n            pos: x\n          },\n          info_box: {\n            pos_x: x,\n            pos_y: y,\n            value_x: this.state.data_map_area_DATES[key][1],\n            value_y: this.state.data_map_area_DATES[key],\n            colors: get_random_colors(this.props.plot_settings.number_of_series)\n          }\n        });\n\n        if (this.state.info_box.visibility === 'hidden' || this.state.info_box.visibility === undefined) {\n          this.setState({\n            mark_line: {\n              pos: x\n            }\n          });\n        }\n      } else if (key !== undefined) {\n        ////////////////////////////\n        let left_index = key - 1;\n        let right_index = key + 1; //keys left\n\n        for (let i = key; i >= 0; i--) {\n          if (this.state.data_map_area_DATES[i] !== undefined) {\n            left_index = i;\n            break;\n          }\n        } //keys right\n\n\n        for (let i = key; i <= this.state.ranges.max_x; i++) {\n          if (this.state.data_map_area_DATES[i] !== undefined) {\n            right_index = i;\n            break;\n          }\n        } //index difference\n\n\n        let left_diff = key - left_index;\n        let right_diff = right_index - key;\n\n        if (this.state.data_map_area_DATES[left_index] !== undefined && this.state.data_map_area_DATES[right_index] !== undefined) {\n          if (left_diff <= right_diff) {\n            this.setState({\n              mark_line: {\n                pos: x\n              },\n              info_box: {\n                pos_x: x,\n                pos_y: y,\n                value_x: this.state.data_map_area_DATES[key][1],\n                value_y: this.state.data_map_area_DATES[key],\n                colors: get_random_colors(this.props.plot_settings.number_of_series)\n              }\n            });\n\n            if (this.state.info_box.visibility === 'hidden' || this.state.info_box.visibility === undefined) {\n              this.setState({\n                mark_line: {\n                  pos: x\n                }\n              });\n            }\n          } else {\n            this.setState({\n              mark_line: {\n                pos: x\n              },\n              info_box: {\n                pos_x: x,\n                pos_y: y,\n                value_x: this.state.data_map_area_DATES[key][1],\n                value_y: this.state.data_map_area_DATES[key],\n                colors: get_random_colors(this.props.plot_settings.number_of_series)\n              }\n            });\n\n            if (this.state.info_box.visibility === 'hidden' || this.state.info_box.visibility === undefined) {\n              this.setState({\n                mark_line: {\n                  pos: x\n                }\n              });\n            }\n          }\n        } /////////////////\n\n      }\n    } else if (x > this.state.dimensions.width || y > this.state.dimensions.height || x < this.state.dimensions.x_trans || y < this.state.dimensions.y_trans) {\n      this.setState({\n        mark_line: {\n          visibility: \"hidden\",\n          pos: 9999\n        },\n        info_box: {\n          visibility: \"hidden\",\n          pos_x: 9999,\n          pos_y: 9999,\n          colors: get_random_colors(this.props.plot_settings.number_of_series)\n        }\n      });\n    }\n  }\n\n  handleHoverOff(event) {\n    this.setState({\n      mark_line: {\n        pos: 0,\n        visibility: \"hidden\"\n      },\n      info_box: {\n        pos_x: 0,\n        pos_y: 0,\n        visibility: \"hidden\",\n        colors: get_random_colors(this.props.plot_settings.number_of_series)\n      }\n    });\n  }\n\n  render() {\n    let area_paths = this.state.scaled_data[0].map((entity, index) => {\n      return React.createElement(Area_Path, {\n        key: index,\n        data: entity,\n        color: this.state.colors[index],\n        style: \"none\",\n        slice: 4,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 319\n        },\n        __self: this\n      });\n    });\n    let area_paths_future = this.state.scaled_data[1].map((entity, index) => {\n      return React.createElement(Area_Path, {\n        key: index,\n        data: entity,\n        color: this.state.colors[index],\n        style: \"dash\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 325\n        },\n        __self: this\n      });\n    });\n    let v_b = \"0 0 \" + this.state.dimensions.svg_width + \" \" + this.props.plot_settings.height;\n    let v_trans = \"translate(\" + this.state.dimensions.x_trans + \",\" + this.state.dimensions.y_trans + \")\";\n    const aa = this.state.max_y;\n    const bb = this.state.min_y;\n    let lower_bound = (Math.ceil((bb + 1) / 10) - 1) * 10;\n    let upper_bound = Math.ceil((Math.abs(aa) + 1) / 10) * 10;\n    let calc_y_number = (upper_bound - lower_bound) / 10;\n    return React.createElement(\"div\", {\n      ref: this.divRef,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 340\n      },\n      __self: this\n    }, React.createElement(\"svg\", {\n      version: \"1.1\",\n      xmlns: \"http://www.w3.org/2000/svg\",\n      preserveAspectRatio: \"none\",\n      onMouseMove: this.handleMouseMove,\n      onMouseLeave: this.handleHoverOff,\n      className: \"test_plot\",\n      width: this.state.dimensions.svg_width,\n      height: this.props.plot_settings.height,\n      viewBox: v_b,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341\n      },\n      __self: this\n    }, React.createElement(\"g\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342\n      },\n      __self: this\n    }, React.createElement(\"g\", {\n      transform: v_trans,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 343\n      },\n      __self: this\n    }, area_paths, area_paths_future, React.createElement(Plot, {\n      dimensions: this.state.dimensions,\n      y_number: this.state.y_number,\n      title: this.state.title,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 349\n      },\n      __self: this\n    }), React.createElement(AxisY, {\n      dimensions: this.state.dimensions,\n      y_number: calc_y_number,\n      y_label: this.state.y_label,\n      lower_bound: lower_bound,\n      upper_bound: upper_bound,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 351\n      },\n      __self: this\n    }), React.createElement(AxisX, {\n      dimensions: this.state.dimensions,\n      x_label: this.state.x_label,\n      ticks: this.state.ticks,\n      dates: this.state.data_map_area_DATES,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 353\n      },\n      __self: this\n    }), React.createElement(Legend, {\n      dimensions: this.state.dimensions,\n      colors: this.state.colors,\n      keywords: this.props.plot_settings.keywords,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 355\n      },\n      __self: this\n    }), React.createElement(Static_Line, {\n      dimensions: this.state.dimensions,\n      ranges: this.state.ranges,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 357\n      },\n      __self: this\n    }), React.createElement(Pointer_Line, {\n      mark_line: this.state.mark_line,\n      height: this.state.dimensions.height,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 359\n      },\n      __self: this\n    }), React.createElement(Info_Box, {\n      info_box: this.state.info_box,\n      width: dimensions.box_width,\n      height: this.state.info_box_height,\n      keywords: this.props.plot_settings.keywords,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 361\n      },\n      __self: this\n    })))));\n  }\n\n  get_dimensions(width) {\n    let height = width / ratio;\n    let x_trans_left = this.state.x_trans;\n    let y_trans_up = this.state.y_trans;\n    let x_trans_right = this.state.x_trans;\n    let y_trans_bottom = this.state.y_trans;\n\n    if (width > 1800) {\n      height = height;\n      x_trans_left = 80;\n      y_trans_up = 80;\n      x_trans_right = 50;\n      y_trans_bottom = 80;\n    }\n\n    if (width <= 1800) {\n      height = 1.2 * width / ratio;\n      x_trans_left = 80;\n      y_trans_up = 80;\n      x_trans_right = 50;\n      y_trans_bottom = 80;\n    }\n\n    if (width <= 1600) {\n      height = 1.4 * width / ratio;\n      x_trans_left = 80;\n      y_trans_up = 80;\n      x_trans_right = 50;\n      y_trans_bottom = 80;\n    }\n\n    if (width <= 1400) {\n      height = 1.6 * width / ratio;\n      x_trans_left = 70;\n      y_trans_up = 70;\n      x_trans_right = 50;\n      y_trans_bottom = 70;\n    }\n\n    if (width <= 1200) {\n      height = 1.8 * width / ratio;\n      x_trans_left = 60;\n      y_trans_up = 60;\n      x_trans_right = 50;\n      y_trans_bottom = 70;\n    } // if(width<=800){\n    //   height = (2.2)*width/(ratio);\n    //   x_trans = 60;\n    //   y_trans = 20;\n    //   x_trans2 = 20;\n    //   y_trans2 = 60;\n    // }\n\n\n    if (width <= 700) {\n      height = 3.1 * width / ratio;\n      x_trans_left = 60;\n      y_trans_up = 20;\n      x_trans_right = 50;\n      y_trans_bottom = this.state.number_of_series * 14 + 80;\n    }\n\n    let sizes = {\n      height: height,\n      x_trans_left: x_trans_left,\n      y_trans_up: y_trans_up,\n      x_trans_right: x_trans_right,\n      y_trans_bottom: y_trans_bottom\n    };\n    return sizes;\n  }\n\n}\nexport default KeywordPlot;","map":{"version":3,"sources":["G:/kloud9/dashboard-last/keywords-tool/client/src/components/plot/src/plot/KeywordPlot.js"],"names":["React","get_random_colors","get_box_height","get_data_mocks_area_DATES","scale_data_mocks","get_data_map_area_DATES","get_min_value","get_max_value","appConfig","AxisX","AxisY","Legend","Static_Line","Pointer_Line","Info_Box","Area_Path","Plot","dimensions","ratio","KeywordPlot","PureComponent","constructor","props","handleMouseMove","bind","handleHoverOff","updateWindowDimensions","x_trans_left","y_trans_up","y_trans_bottom","width","window","innerWidth","height","plot_settings","divRef","createRef","min_y","data","historical_data","max_y","number_of_series","keywords","length","lower_bound","Math","ceil","upper_bound","abs","ranges","max_x","forecasted_data","min_x","state","title","x_label","y_label","mark_line","pos","visibility","info_box","pos_x","pos_y","colors","scaled_data","data_map_area_DATES","info_box_height","svg_width","x_trans","y_trans","historical_data_length","forecasted_data_length","ticks","componentDidMount","addEventListener","current","focus","componentWillUnmount","removeEventListener","clientWidth","sizes","get_dimensions","x_trans_right","plot_width","plot_height","setState","event","e","target","dim","getBoundingClientRect","x","clientX","left","y","clientY","top","x_diff","x_frame","key","round","undefined","left_index","right_index","i","value_x","value_y","left_diff","right_diff","render","area_paths","map","entity","index","area_paths_future","v_b","v_trans","aa","bb","calc_y_number","y_number","box_width"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\nimport { get_random_colors, get_box_height, get_data_mocks_area_DATES, scale_data_mocks, get_data_map_area_DATES, get_min_value, get_max_value } from './utils/functions'\r\nimport { appConfig } from './utils/config.js';\r\n\r\nimport AxisX from './parts/AxisX';\r\nimport AxisY from './parts/AxisY';\r\nimport Legend from './parts/Legend';\r\nimport Static_Line from './parts/Static_Line';\r\nimport Pointer_Line from './parts/Pointer_Line';\r\nimport Info_Box from './parts/Info_Box';\r\nimport Area_Path from './parts/Area_Path';\r\nimport Plot from './parts/Plot';\r\nimport './css/plot.css';\r\n\r\n\r\nlet dimensions = appConfig.dimensions;\r\nconst ratio = 4.5;\r\n\r\nexport class KeywordPlot extends React.PureComponent {\t\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.handleMouseMove = this.handleMouseMove.bind(this);\r\n    this.handleHoverOff = this.handleHoverOff.bind(this);\r\n    this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\r\n\r\n    let x_trans_left = 85;\r\n    let y_trans_up = 85;\r\n    let y_trans_bottom = 85;\r\n\r\n    let width = window.innerWidth*(0.6) - 2*x_trans_left;\r\n    let height = this.props.plot_settings.height - y_trans_up - y_trans_bottom;\r\n\r\n    this.divRef = React.createRef();\r\n\r\n    let min_y = get_min_value(this.props.data.historical_data);\r\n    let max_y = get_max_value(this.props.data.historical_data);\r\n\r\n    let number_of_series = this.props.plot_settings.keywords.length;\r\n\r\n    let lower_bound = (Math.ceil(((min_y)+1) / 10)-1) * 10\r\n    let upper_bound = Math.ceil((Math.abs(max_y)+1) / 10) * 10\r\n\r\n    let ranges = {\r\n      max_x: (this.props.data.historical_data[0].length + this.props.data.forecasted_data[0].length),\r\n      min_x: 0,\r\n      max_y: upper_bound,\r\n      min_y: lower_bound,\r\n    }\r\n\r\n    this.state = {\r\n      title: this.props.plot_settings.title,\r\n      x_label: this.props.plot_settings.x_label,\r\n      y_label: this.props.plot_settings.y_label,\r\n\r\n      mark_line: {\r\n        pos: 0,\r\n        visibility: \"hidden\"\r\n      },\r\n\r\n      info_box: {\r\n        pos_x: 0,\r\n        pos_y: 0,\r\n        visibility: \"hidden\",\r\n        colors: get_random_colors(number_of_series),\r\n      },\r\n\r\n      scaled_data: this.scale_data_mocks(this.props.data, ranges, width, height),\r\n      data_map_area_DATES: this.get_data_map_area_DATES(this.props.data),\r\n\r\n      colors: this.get_random_colors(number_of_series),\r\n      info_box_height: this.get_box_height(number_of_series),\r\n\r\n      dimensions: {\r\n        svg_width: width,\r\n        width: width/1.1,\r\n        height: height,\r\n        x_trans: x_trans_left,\r\n        y_trans: y_trans_up,\r\n        y_trans_bottom: y_trans_bottom,\r\n        historical_data_length: this.props.data.historical_data[0].length,\r\n        forecasted_data_length: this.props.data.forecasted_data[0].length,\r\n      },\r\n      min_y: min_y,\r\n      max_y: max_y,\r\n      ticks: 12,\r\n\r\n      ranges: ranges,\r\n      number_of_series: number_of_series,\r\n      // height: height\r\n    };\r\n  }\r\n\r\n\r\n  componentDidMount() {\r\n    this.updateWindowDimensions();\r\n    window.addEventListener('resize', this.updateWindowDimensions);\r\n    this.divRef.current.focus();\r\n  }\r\n  \r\n  componentWillUnmount() {\r\n    window.removeEventListener('resize', this.updateWindowDimensions);\r\n  }\r\n  \r\n  updateWindowDimensions() {\r\n    let svg_width = this.divRef.current.clientWidth;\r\n\r\n    let sizes = this.get_dimensions(svg_width)\r\n\r\n    let x_trans_left = sizes.x_trans_left;\r\n    let x_trans_right = sizes.x_trans_right;\r\n    let y_trans_up = sizes.y_trans_up;\r\n    let y_trans_bottom = sizes.y_trans_bottom;\r\n    let height = sizes.height;\r\n\r\n    let plot_width = svg_width - x_trans_left - x_trans_right;\r\n    let plot_height = this.props.plot_settings.height - y_trans_up - y_trans_bottom;\r\n    // let plot_height = this.state.height - y_trans_up - y_trans_bottom;\r\n\r\n    let ranges = this.state.ranges;\r\n\r\n    this.setState({\r\n      dimensions: {\r\n        svg_width: svg_width,\r\n        width: plot_width,\r\n        height: plot_height,\r\n        x_trans: x_trans_left,\r\n        y_trans: y_trans_up,\r\n        x_trans_right: x_trans_right,\r\n        y_trans_bottom: y_trans_bottom,\r\n\r\n        historical_data_length: this.props.data.historical_data[0].length,\r\n        forecasted_data_length: this.props.data.forecasted_data[0].length,\r\n       },\r\n       scaled_data: this.scale_data_mocks(this.props.data, ranges, plot_width, plot_height),\r\n    });\r\n  }\r\n\r\n  scale_data_mocks(data, ranges, width, height){\r\n    return scale_data_mocks(data, ranges, width, height)\r\n  }\r\n\r\n  get_data_map_area_DATES(data){\r\n    return get_data_map_area_DATES(data)\r\n  }\r\n\r\n  get_random_colors(number_of_series){\r\n    return get_random_colors(number_of_series)\r\n  }\r\n\r\n  get_box_height(number_of_series){\r\n    return get_box_height(number_of_series)\r\n  }\r\n\r\n\r\n  handleMouseMove(event) {\r\n    var e = event.target;\r\n    var dim = e.getBoundingClientRect();\r\n    var x = event.clientX - dim.left - this.state.dimensions.x_trans;\r\n    var y = event.clientY - dim.top - this.state.dimensions.y_trans;\r\n\r\n    if(x >= 0 && y >= 0 && x <= this.state.dimensions.width && y <= this.state.dimensions.height){\r\n\r\n      let x_diff = this.state.ranges.max_x - this.state.ranges.min_x;  \r\n      let x_frame = this.state.dimensions.width/x_diff;\r\n      let key = Math.round((x)/x_frame);\r\n\r\n      if (this.state.data_map_area_DATES[key] !== undefined){\r\n\r\n        let left_index = Math.round((this.state.ranges.max_x - this.state.ranges.min_x)/2) - 1;\r\n        let right_index = Math.round((this.state.ranges.max_x - this.state.ranges.min_x)/2) + 1;\r\n\r\n        //keys left\r\n        for(let i=this.state.ranges.min_x; i<=key; i++){\r\n          if(this.state.data_map_area_DATES[i] !== undefined){\r\n            left_index = i\r\n          }\r\n        }\r\n\r\n        //keys right\r\n        for(let i=key; i<=this.state.ranges.max_x; i++){\r\n          if(this.state.data_map_area_DATES[i] !== undefined){\r\n            right_index = i\r\n          }\r\n        }\r\n    \r\n        //index difference\r\n        this.setState({\r\n          mark_line: {\r\n            pos: x,  \r\n          },\r\n          info_box: {\r\n            pos_x: x,\r\n            pos_y: y,\r\n            value_x: this.state.data_map_area_DATES[key][1],\r\n            value_y: this.state.data_map_area_DATES[key],\r\n            colors: get_random_colors(this.props.plot_settings.number_of_series)\r\n          }\r\n        })\r\n        if (this.state.info_box.visibility === 'hidden' || this.state.info_box.visibility === undefined) {\r\n          this.setState({\r\n            mark_line: {\r\n              pos: x\r\n            }\r\n          })\r\n        }\r\n      } else if (key !== undefined){\r\n////////////////////////////\r\n\r\n        let left_index = key - 1;\r\n        let right_index = key + 1;\r\n        \r\n        //keys left\r\n        for (let i=key; i>=0; i--) {\r\n          if(this.state.data_map_area_DATES[i] !== undefined){\r\n            left_index = i;\r\n            break;\r\n          }\r\n        }\r\n\r\n        //keys right\r\n        for (let i=key; i<=this.state.ranges.max_x; i++) {\r\n          if(this.state.data_map_area_DATES[i] !== undefined) {\r\n            right_index = i;\r\n            break;\r\n          }\r\n        }\r\n\r\n        //index difference\r\n        let left_diff = key - left_index;\r\n        let right_diff = right_index - key;\r\n\r\n\r\n        if((this.state.data_map_area_DATES[left_index] !== undefined) && (this.state.data_map_area_DATES[right_index] !== undefined)){\r\n          if (left_diff<=right_diff ) {\r\n            this.setState({\r\n              mark_line: {\r\n                pos: x,  \r\n              },\r\n              info_box: {\r\n                pos_x: x,\r\n                pos_y: y,\r\n                value_x: this.state.data_map_area_DATES[key][1],\r\n                value_y: this.state.data_map_area_DATES[key],\r\n                colors: get_random_colors(this.props.plot_settings.number_of_series)\r\n              }\r\n            })\r\n            if (this.state.info_box.visibility === 'hidden' || this.state.info_box.visibility === undefined) {\r\n              this.setState({\r\n                mark_line: {\r\n                  pos: x\r\n                }\r\n              })\r\n            }\r\n          } else {\r\n            this.setState({\r\n              mark_line: {\r\n                pos: x,  \r\n              },\r\n              info_box: {\r\n                pos_x: x,\r\n                pos_y: y,\r\n                value_x: this.state.data_map_area_DATES[key][1],\r\n                value_y: this.state.data_map_area_DATES[key],\r\n                colors: get_random_colors(this.props.plot_settings.number_of_series)\r\n              }\r\n            })\r\n            if (this.state.info_box.visibility === 'hidden' || this.state.info_box.visibility === undefined) {\r\n              this.setState({\r\n                mark_line: {\r\n                  pos: x\r\n                }\r\n              })\r\n            }\r\n          }\r\n\r\n        }\r\n/////////////////\r\n\r\n      }\r\n    } else if (x > this.state.dimensions.width || y > this.state.dimensions.height || x < this.state.dimensions.x_trans || y < this.state.dimensions.y_trans){\r\n      this.setState({\r\n        mark_line: {\r\n          visibility: \"hidden\",\r\n          pos: 9999\r\n        },\r\n        info_box: {\r\n          visibility: \"hidden\",\r\n          pos_x: 9999,\r\n          pos_y: 9999,\r\n          colors: get_random_colors(this.props.plot_settings.number_of_series)\r\n        }\r\n      })\r\n    }\r\n  }\r\n  \r\n\r\n  handleHoverOff(event) {\r\n    this.setState({\r\n      mark_line:{\r\n          pos: 0,\r\n          visibility: \"hidden\"\r\n      },\r\n      info_box: {\r\n        pos_x: 0,\r\n        pos_y: 0,\r\n        visibility: \"hidden\",\r\n        colors: get_random_colors(this.props.plot_settings.number_of_series)\r\n      }\r\n    })\r\n  }\r\n\r\n  render() {\r\n\r\n  let area_paths = this.state.scaled_data[0].map(( entity, index ) => {\r\n      return (\r\n        <Area_Path key={index} data={entity} color={this.state.colors[index]} style={\"none\"} slice={4}/>\r\n      );\r\n    });\r\n\r\n    let area_paths_future = this.state.scaled_data[1].map(( entity, index ) => {\r\n      return (\r\n        <Area_Path key={index} data={entity} color={this.state.colors[index]} style={\"dash\"} />\r\n      );\r\n    });\r\n\r\n    let v_b = \"0 0 \" + this.state.dimensions.svg_width + \" \" + this.props.plot_settings.height;\r\n    let v_trans = \"translate(\" + this.state.dimensions.x_trans + \",\" + this.state.dimensions.y_trans + \")\";\r\n\r\n    const aa = this.state.max_y;\r\n    const bb = this.state.min_y;\r\n\r\n    let lower_bound = (Math.ceil(((bb)+1) / 10)-1) * 10\r\n    let upper_bound = Math.ceil((Math.abs(aa)+1) / 10) * 10\r\n    let calc_y_number = (upper_bound - lower_bound)/10;\r\n\r\n    return (\r\n      <div ref={this.divRef}>\r\n        <svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" preserveAspectRatio=\"none\" onMouseMove={this.handleMouseMove} onMouseLeave={this.handleHoverOff} className=\"test_plot\" width={this.state.dimensions.svg_width} height={this.props.plot_settings.height} viewBox={v_b}>\r\n            <g>\r\n              <g transform={v_trans}>\r\n\r\n                { area_paths }\r\n\r\n                { area_paths_future }\r\n                \r\n                <Plot dimensions={this.state.dimensions} y_number={this.state.y_number} title={this.state.title} />\r\n\r\n                <AxisY dimensions={this.state.dimensions} y_number={calc_y_number} y_label={this.state.y_label} lower_bound={lower_bound} upper_bound={upper_bound} />\r\n\r\n                <AxisX dimensions={this.state.dimensions} x_label={this.state.x_label} ticks={this.state.ticks} dates={this.state.data_map_area_DATES} />\r\n                \r\n                <Legend dimensions={this.state.dimensions} colors={this.state.colors} keywords={this.props.plot_settings.keywords} />\r\n\r\n                <Static_Line dimensions={this.state.dimensions} ranges={this.state.ranges} />\r\n\r\n                <Pointer_Line mark_line={this.state.mark_line} height={this.state.dimensions.height} />\r\n\r\n                <Info_Box info_box={this.state.info_box} width={dimensions.box_width} height={this.state.info_box_height} keywords={this.props.plot_settings.keywords}  />\r\n                \r\n              </g>\r\n            </g>\r\n        </svg>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  get_dimensions(width) {\r\n    let height = width/(ratio);\r\n    let x_trans_left = this.state.x_trans;\r\n    let y_trans_up = this.state.y_trans;\r\n    let x_trans_right = this.state.x_trans;\r\n    let y_trans_bottom = this.state.y_trans;\r\n\r\n    if(width>1800) {\r\n      height = height;\r\n      x_trans_left = 80;\r\n      y_trans_up = 80;\r\n      x_trans_right = 50;\r\n      y_trans_bottom = 80;\r\n    }\r\n\r\n    if(width<=1800) {\r\n      height = (1.2)*width/(ratio);\r\n      x_trans_left = 80;\r\n      y_trans_up = 80;\r\n      x_trans_right = 50;\r\n      y_trans_bottom = 80;\r\n    }\r\n\r\n    if(width<=1600) {\r\n      height = (1.4)*width/(ratio);\r\n      x_trans_left = 80;\r\n      y_trans_up = 80;\r\n      x_trans_right = 50;\r\n      y_trans_bottom = 80;\r\n    }\r\n    \r\n    if(width<=1400) {\r\n      height = (1.6)*width/(ratio);\r\n      x_trans_left = 70;\r\n      y_trans_up = 70;\r\n      x_trans_right = 50;\r\n      y_trans_bottom = 70;\r\n    }\r\n\r\n    if (width<=1200) {\r\n      height = (1.8)*width/(ratio);\r\n      x_trans_left = 60;\r\n      y_trans_up = 60;\r\n      x_trans_right = 50;\r\n      y_trans_bottom = 70;\r\n    }\r\n\r\n    // if(width<=800){\r\n    //   height = (2.2)*width/(ratio);\r\n    //   x_trans = 60;\r\n    //   y_trans = 20;\r\n    //   x_trans2 = 20;\r\n    //   y_trans2 = 60;\r\n    // }\r\n\r\n    if(width<=700) {\r\n      height = (3.1)*width/(ratio);\r\n      x_trans_left = 60;\r\n      y_trans_up = 20;\r\n      x_trans_right = 50;\r\n      y_trans_bottom = this.state.number_of_series*14 + 80;\r\n    }\r\n\r\n    let sizes = {\r\n      height: height,\r\n      x_trans_left: x_trans_left,\r\n      y_trans_up: y_trans_up,\r\n      x_trans_right: x_trans_right,\r\n      y_trans_bottom: y_trans_bottom\r\n    }\r\n\r\n    return sizes;\r\n  }\r\n\r\n}\r\n\r\nexport default KeywordPlot;\r\n"]},"metadata":{},"sourceType":"module"}